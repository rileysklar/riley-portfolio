---
import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import type { iconPaths } from "./IconPaths";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Projects", href: "/work/" },
  { label: "About", href: "/about/" },
  { label: "Blog", href: "/blog/" },
  { label: "Contact", href: "/contact/" },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: {
  label: string;
  href: string;
  icon: keyof typeof iconPaths;
}[] = [
  {
    label: "GitHub",
    href: "https://github.com/rileysklar",
    icon: "github-logo",
  },
  // {
  //   label: "Resume",
  //   href: "https://www.showwcase.com/rileysklar",
  //   icon: "terminal-window",
  // },
  {
    label: "LinkedIn",
    href: "https://www.linkedin.com/in/rileysklar/",
    icon: "linkedin-logo",
  },
  {
    label: "Instagram",
    href: "https://instagram.com/rileysklar",
    icon: "instagram-logo",
  },
  // {
  //   label: "Twitter",
  //   href: "https://twitter.com/rileysklar",
  //   icon: "twitter-logo",
  // },
  // { label: "Twitch", href: "https://twitch.tv/me", icon: "twitch-logo" },
  // {
  //   label: "CodePen",
  //   href: "https://codepen.io/rileyshake",
  //   icon: "codepen-logo",
  // },
  // {
  //   label: "dribbble",
  //   href: "https://dribbble.com/rileysklar",
  //   icon: "dribbble-logo",
  // },

  // {
  //   label: "YouTube",
  //   href: "https://www.youtube.com/channel/UCm4dAQMtI-qmKRbbgT3dbBA",
  //   icon: "youtube-logo",
  // },
];
---

<nav>
  <div class="menu-header">
    <a href="/" class="site-title">
      <Icon icon="code" color="var(--accent-regular)" size="1.6em" gradient />
      Riley Sklar
    </a>
    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <noscript>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>
  <noscript>
    <div class="menu-footer">
      <div class="socials">
        <a
          href="https://drive.google.com/file/d/1QDPqCFQjYVpBZ9IWQMIJbQTVo9Nr70EO/view?usp=drive_link"
        >
          Resume</a
        >
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
    </div>
  </noscript>
  <div id="menu-content" hidden>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
        <!-- <a
          class="resume"
          href="https://drive.google.com/file/d/1QDPqCFQjYVpBZ9IWQMIJbQTVo9Nr70EO/view?usp=drive_link"
        >
          Resume</a
        > -->
      </div>

      <div class="theme-toggle">
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add("menu-content");

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
        // Toggle nav border radius
        const nav = document.querySelector("nav");
        if (nav) {
          nav.style.borderRadius = expand ? "1rem" : "1rem";
        }
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
        // Reset border radius for desktop
        const nav = document.querySelector("nav");
        if (nav && e.matches) {
          nav.style.borderRadius = "1rem";
        }
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);

  // Add scroll behavior
  let lastScrollY = window.scrollY;
  const nav = document.querySelector("nav");

  window.addEventListener("scroll", () => {
    if (!nav) return;

    const currentScrollY = window.scrollY;
    const scrollingDown = currentScrollY > lastScrollY;

    // Only apply transform when scrolling past 100px
    if (currentScrollY > 100) {
      nav.style.transform = scrollingDown
        ? "translateY(-100%)"
        : "translateY(0)";
    } else {
      nav.style.transform = "translateY(0)";
    }

    lastScrollY = currentScrollY;
  });
</script>

<style>
  nav {
    z-index: 9999;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    font-family: var(--font-brand);
    font-weight: 500;
    height: auto;
    transition: transform 0.3s ease;
    align-content: center;
    backdrop-filter: blur(40px);
    -webkit-backdrop-filter: blur(40px);
    border-radius: 1rem;
    margin: 1.5rem;
    background-color: var(--gray-999_40);
    border: 1px solid var(--gray-800);
  }

  .menu-header {
    position: relative;
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1rem;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
    font-size: 1.25em;
  }

  .menu-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    padding: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    background: transparent;
    cursor: pointer;
  }

  .menu-button::before,
  .menu-button::after {
    content: '';
    display: block;
    position: absolute;
    width: 1.5rem;
    height: 2px;
    background: var(--gray-0);
    transition: transform 0.3s ease;
  }

  .menu-button::before {
    transform: translateY(-4px);
  }

  .menu-button::after {
    transform: translateY(4px);
  }

  .menu-button[aria-expanded="true"]::before {
    transform: rotate(45deg);
  }

  .menu-button[aria-expanded="true"]::after {
    transform: rotate(-45deg);
  }

  .menu-button :global(svg) {
    display: none;
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
    animation: slideDown 0.2s ease-out;
    overflow: hidden;
    position: relative;
  }

 

  .nav-items {
    position: relative;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-xl);
    align-items: center;
    line-height: 1.2;
    list-style: none;
    padding: 1rem;
  }

  @keyframes slideDown {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 100%;
    }
  }

  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }

  .link.active {
    color: var(--gray-0);
  }

  .menu-footer {
    --icon-size: var(--text-xl);
    --icon-padding: 0.5rem;
    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
  }

  .socials {
    display: flex;
    flex-wrap: wrap;
    gap: 0.625rem;
    font-size: var(--icon-size);
  }

  .social {
    display: flex;
    padding: var(--icon-padding);
    text-decoration: none;
    color: var(--accent-dark);
    transition: color var(--theme-transition);
  }

  .resume {
    font-size: 0.5em;
    display: flex;
    align-items: center;
    background-color: var(--gray-900);
    padding: 0.2em 1em;
    border-radius: 100em;
    border: solid 1px var(--gray-800);
  }

  .social:hover,
  .social:focus {
    color: var(--gray--900);
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
    border: 1px solid var(--gray-800);
    border-radius: 100em;
    padding: 0.3em 0.15em;
  }

  @media (min-width: 50em) {
    nav {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      padding: .5rem ;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .site-title {
      font-size: var(--text-lg);
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--text-sm);
      border-radius: 999rem;
      padding: 0.5rem 0.5625rem;
      border: 1px solid var(--gray-800);
      /* background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md); */
    }

    /* .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    } */

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition:
        color var(--theme-transition),
        background-color var(--theme-transition);
    }

    .link:hover,
    .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link.active {
      color: var(--gray-900);
      background-color: var(--accent-regular);
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
    }

    .socials {
      display: none;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: flex;
      justify-content: flex-end;
      gap: 0;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }
</style>
